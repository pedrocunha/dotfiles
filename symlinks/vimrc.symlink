call plug#begin()
Plug 'vim-scripts/kwbdi.vim'
Plug 'vim-scripts/closetag.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-sleuth'
Plug 'kien/ctrlp.vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'zerowidth/vim-copy-as-rtf'
Plug 'skalnik/vim-vroom'
Plug 'maxboisvert/vim-simple-complete'
Plug 'junegunn/fzf',        { 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'w0rp/ale'
Plug 'cespare/vim-toml'
Plug 'hashivim/vim-terraform'
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'jremmen/vim-ripgrep'
call plug#end()

set nocompatible                " choose no compatibility with legacy vi
syntax enable
set encoding=utf-8
set showcmd                     " display incomplete commands
set nobackup                    " don't want no backup files
set noswapfile                  " no swap files
filetype plugin indent on       " load file type plugins + indentation
let &t_Co=256

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set list listchars=tab:→\ ,trail:·

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

"" Undoing
set undofile                    " Save undo's after file closes
set undodir=~/.vim/undo         " where to save undo histories
set undolevels=1000             " How many undos
set undoreload=10000            " number of lines to save for undo

"" A must for fast scrolling
set nocursorcolumn
set cursorline
set norelativenumber
syntax sync minlines=256
set ttyfast
set ttyscroll=3
set lazyredraw
set number " show line numbers

"" :e file<tab> shows menu
set wildmenu

"" use old regex engine
set re=1

set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

set shell=/bin/sh

color hybrid

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Fix slow O inserts
set timeout timeoutlen=1000 ttimeoutlen=100

" Delete buffers
nmap <leader>d <Plug>Kwbd

" Cycling between buffers
nnoremap <tab> :bn<CR>
nnoremap <s-tab> :bp<CR>

" Remove highlight
nnoremap h :nohl<CR>

" Close quickfix
nnoremap <leader>q :ccl<CR>

nnoremap Q :quit<CR>

nnoremap <leader>/ :Explore .<cr>
nnoremap <leader>w :w<cr>
nnoremap <leader>f :tag <cword><cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>cn :e ~/Dropbox/notes/coding-notes.txt<cr>

" File & Buffer search
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
let g:ctrlp_use_caching = 0
let g:fzf_tags_command = 'ctags .'

nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>t :FZF<CR>
nmap <leader>y :Tags<CR>

" Search for word under cursor
nmap Y :Rg<CR>

let $FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'

" vim-rails
nnoremap <leader>v :AV<cr>

nnoremap <leader><leader> <C-w>=

" RUBY + RAILS
" Set ruby syntax highlight
au BufRead,BufNewFile Gemfile* setfiletype ruby
au BufRead,BufNewFile *.ru setfiletype ruby
au BufRead,BufNewFile *.god setfiletype ruby

if filereadable("zeus.json")
  let g:vroom_use_zeus = 1
endif

if filereadable("bin/rspec")
  let g:vroom_use_binstubs = 1
endif

let g:vroom_spec_command  = 'rspec --format progress --color'
let g:vroom_rspec_version = '3.x'

" Highlight extra whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Kill whitespace
function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction
autocmd BufWritePre *.rb :call TrimWhiteSpace()
autocmd BufWritePre *.js :call TrimWhiteSpace()
autocmd BufWritePre *.py :call TrimWhiteSpace()

" Make those debugger statements painfully obvious
au BufEnter *.rb syn match error contained "\<binding.pry\>"
au BufEnter *.rb syn match error contained "\<debugger\>"
au BufEnter *.py syn match error contained "\<import ipdb\>"
au BufEnter *.py syn match error contained "\<ipdb.set_trace()\>"

set complete+=kspell                  " add spell check to autocompletes (invoke with C-N in i-mode)
set complete-=t                       " dont use tag and includes for autocompletes
set complete-=i                       " (gives better performance)

set iskeyword+=- " foo-bar is a whole word "

" Annoying bindings
noremap <S-Down> <nop>
noremap <S-Up> <nop>

" +++++++++++++++++ golang settings
let g:go_doc_keywordprg_enabled = 0

" Highlight commonly used library types (`io.Reader`, etc.).
let g:go_highlight_extra_types = 1

" Highlight operators such as `:=` , `==`, `-=`, etc.
let g:go_highlight_operators = 1

" Highlight function and method declarations.
let g:go_highlight_functions = 1

" Highlight the variable names in arguments and return values in function
" declarations. Setting this implies the functionality from
" |'g:go_highlight_functions'|.
let g:go_highlight_function_arguments = 1

" Highlight struct and interface names.
let g:go_highlight_types = 1

let g:go_fmt_fail_silently = 1

nnoremap <leader>g :GoTest<cr>
nnoremap <leader>gd :GoDoc<cr>

let g:go_fmt_command = "goimports"
" +++++++++++++++++ golang settings

autocmd BufRead,TextChanged,TextChangedI *.go call ShowColumnIfLineTooLong(80)
autocmd BufRead,TextChanged,TextChangedI *.rb call ShowColumnIfLineTooLong(80)
autocmd BufRead,TextChanged,TextChangedI *.py call ShowColumnIfLineTooLong(120)

" Color the column marking the lengthLimit when the longest line in the file
" exceeds the lengthLimit
function! ShowColumnIfLineTooLong(lengthLimit)
  " See https://stackoverflow.com/questions/2075276/longest-line-in-vim#2982789
  let maxLineLength = max(map(getline(1,'$'), 'len(v:val)'))

  if maxLineLength > a:lengthLimit
    highlight ColorColumn ctermbg=red guibg=red
    " Draw the vertical line at the first letter that exceeds the limit
    execute "set colorcolumn=" . (a:lengthLimit + 1)
  else
    set colorcolumn=""
  endif
endfunction

" ++++++++++++++++ Lint settings
let g:ale_sign_column_always = 1
let g:ale_fixers = {
\   'ruby': ['mri', 'rubocop'],
\   'python': ['flake8'],
\}
" ++++++++++++++++ Lint settings

nmap <leader>a :call ToggleAlternateFile()<cr>
function! ToggleAlternateFile()
  let extension = expand('%:e')

  if extension == 'go'
    execute "GoAlternate"
  elseif extension == 'rb'
    execute "A"
  endif
endfunction
