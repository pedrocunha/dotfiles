call plug#begin()
Plug 'vim-scripts/kwbdi.vim'
Plug 'vim-scripts/closetag.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-sleuth'
Plug 'kien/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'zerowidth/vim-copy-as-rtf'
Plug 'skalnik/vim-vroom'
" Plug 'mileszs/ack.vim'
" Plug 'Chun-Yang/vim-action-ag'
Plug 'maxboisvert/vim-simple-complete'
Plug 'junegunn/fzf',        { 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'w0rp/ale'
Plug 'cespare/vim-toml'
Plug 'hashivim/vim-terraform'
call plug#end()

set nocompatible                " choose no compatibility with legacy vi
syntax enable
set encoding=utf-8
set showcmd                     " display incomplete commands
set nobackup                    " don't want no backup files
set noswapfile                  " no swap files
filetype plugin indent on       " load file type plugins + indentation
let &t_Co=256

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set list listchars=tab:→\ ,trail:·

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

"" Undoing
set undofile                    " Save undo's after file closes
set undodir=~/.vim/undo         " where to save undo histories
set undolevels=1000             " How many undos
set undoreload=10000            " number of lines to save for undo

"" A must for fast scrolling
set nocursorcolumn
set cursorline
set norelativenumber
syntax sync minlines=256
set ttyfast
set ttyscroll=3
set lazyredraw
set number " show line numbers

"" :e file<tab> shows menu
set wildmenu

"" use old regex engine
set re=1

set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

set shell=/bin/sh

color hybrid

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Fix slow O inserts
set timeout timeoutlen=1000 ttimeoutlen=100

" Delete buffers
nmap <leader>d <Plug>Kwbd

" Cycling between buffers
nnoremap <tab> :bn<CR>
nnoremap <s-tab> :bp<CR>
nnoremap <leader><leader> :b#<CR>

" Remove highlight
nnoremap h :nohl<CR>

" Close quickfix
nnoremap <leader>q :ccl<CR>

nnoremap Q :quit<CR>

" Run last command
nnoremap <leader><leader> @:

nnoremap <leader>/ :Explore .<cr>
nnoremap <leader>w :w<cr>
nnoremap <leader>f :tag <cword><cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>cn :e ~/Dropbox/notes/coding-notes.txt<cr>

" ctrlP
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
let g:ctrlp_use_caching = 0
nnoremap <leader>b :CtrlPBuffer<CR>

nnoremap <leader>t :FZF<CR>
nnoremap <leader>y :Tags<CR>
let g:fzf_tags_command = 'ctags .'
let g:ackprg = 'ag --nogroup --nocolor --column'

nmap K :call fzf#vim#ag(expand('<cword>'))<CR>
vmap K :call fzf#vim#ag(expand('<cword>'))<CR>

" vim-fugitive
nnoremap <leader>a :A<cr>
nnoremap <leader>v :AV<cr>

" RUBY + RAILS
" Set ruby syntax highlight
au BufRead,BufNewFile Gemfile* setfiletype ruby
au BufRead,BufNewFile *.ru setfiletype ruby
au BufRead,BufNewFile *.god setfiletype ruby

if filereadable("zeus.json")
  let g:vroom_use_zeus = 1
endif

if filereadable("../../zeus.json")
  let g:vroom_use_zeus = 1
endif

if filereadable("bin/spring")
  let g:vroom_use_spring = 1
endif

if filereadable("bin/rspec")
  let g:vroom_use_binstubs = 1
endif

let g:vroom_spec_command  = 'rspec --format progress --color'
let g:vroom_rspec_version = '3.x'

" Highlight lines over 80 chars
highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
match OverLength /\%>80v.\+/

" Highlight extra whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Kill whitespace
function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction
autocmd BufWritePre *.rb :call TrimWhiteSpace()
autocmd BufWritePre *.js :call TrimWhiteSpace()

" Make those debugger statements painfully obvious
au BufEnter *.rb syn match error contained "\<binding.pry\>"
au BufEnter *.rb syn match error contained "\<debugger\>"

set complete+=kspell                  " add spell check to autocompletes (invoke with C-N in i-mode)
set complete-=t                       " dont use tag and includes for autocompletes
set complete-=i                       " (gives better performance)

" Annoying bindings
nmap <S-Down> <nop>
nmap <S-Up> <nop>
